import pytorch_common.util as pu
import os
import numpy as np
import logging
import pandas as pd
from IPython.core.display import HTML
from recommender import RecommenderResult, to_image_html
import random



class DatabaseUserItemFilteringRecommenderResult(RecommenderResult):
    def __init__(
        self,
        recommender_name,
        data,
        seen_items
    ):
        self.__recommender_name = recommender_name
        self.__data             = data
        self.__seen_items       = seen_items


    @property
    def data(self): return self.__data

    @property
    def seen(self): return self.__seen_items

    def show(
        self,
        k              = 5,
        sort_by        = ['pred_user_rating', 'user_distance_weighted_rating_score'],
        sort_ascending = False,
        image_width    = 340,
        transpose      = True
    ):
        display(HTML(f'<h2>Recommendations</h2>'))

        if self.__data is None:
            display(HTML('<h4>Not Found recommendations</h4>'))
            return


        df = self.__data.sort_values(by=sort_by, ascending=sort_ascending)[:k]


        display(HTML(f'<h4><b>Tags:</b> {self.__as_tags(df, "genres")}</h4>'))


        df['image'] = df.apply(lambda row: to_image_html(row['poster'], width=image_width, alt=row['title']), axis=1)

        if transpose:
            df = df[[
                'image',
                'genres',
                'rating',
                'pred_user_rating',
                'user_sim_weighted_rating_score',
                'user_sim_weighted_pred_rating_score',
                'user_item_sim'
            ]]

            df['genres'] = df['genres'].apply(lambda genres: '<ul>' +  ''.join([F'<li style="text-align:left;vertical-align:top;">{g.capitalize()}</li>' for g in genres]) + '</ul>')

            df = df.rename(columns={
                'user_sim_weighted_rating_score' : 'User sim weighted rating score',
                'user_sim_weighted_pred_rating_score' : 'User sim weighted predicted rating score',
                'user_item_sim': 'User Item Similarity',
                'pred_user_rating': 'Predicted Rating',
                'rating' : 'Mean Rating',
                'image'  : 'Poster',
                'genres' : 'Genres'
            })

            df = df.reset_index()
            df = df.T.drop(['index'])

        else:
            df = df[['user_sim_weighted_rating_score', 'user_sim_weighted_pred_rating_score', 'pred_user_rating', 'user_item_sim', 'rating', 'image', 'genres']]
            df = df.rename(columns={
                'user_sim_weighted_rating_score' : 'User sim weighted rating score',
                'user_sim_weighted_pred_rating_score' : 'User sim weighted predicted rating score',
                'pred_user_rating': 'Predicted Rating',
                'user_item_sim': 'User Item Similarity',
                'rating' : 'Mean Rating',
                'image'  : 'Poster',
                'genres' : 'Genres'
            }).reset_index()

        display(HTML(df.to_html(escape=False)))
        display(HTML(f'<h5><b>Generated by</b> {self.__recommender_name}.</h5>'))


    def __as_tags(self, df, column):
        tag_counts =pd.Series(np.concatenate(df[column].apply(np.array).values)).value_counts().to_dict()
        return ', '.join([f"<b>{tag.replace(')', '').replace('(', '')}</b>({count})" for tag, count in tag_counts.items()])


    def show_seen(
        self,
        k              = 1000,
        sort_by        = ['rating'],
        sort_ascending = False,
        image_width    = 340,
        transpose      = True
    ):
        display(HTML(f'<h2>User Seen items</h2>'))

        if self.__seen_items is None or self.__seen_items.empty:
            print('Not Found items!')
            return

        df = self.__seen_items.sort_values(by=sort_by, ascending=sort_ascending)[:k]

        display(HTML(f'<h4><b>Tags:</b> {self.__as_tags(df, "genres")}</h4>'))


        df['image'] = df.apply(lambda row: to_image_html(row['poster'], width=image_width, alt=row['title']), axis=1)

        if transpose:
            df = df[['image', 'genres', 'rating']]

            df['genres'] = df['genres'].apply(lambda genres: '<ul>' +  ''.join([F'<li style="text-align:left;vertical-align:top;">{g.capitalize()}</li>' for g in genres]) + '</ul>')

            df = df.rename(columns={
                    'image'  : 'Poster',
                    'genres' : 'Genres',
                    'rating' : 'Rating',
                })
            df = df.reset_index()
            df = df.T.drop(['index'])

        else:
            df = df[['rating', 'image', 'genres']]
            df = df.rename(columns={
                'rating' : 'Rating',
                'image'  : 'Poster',
                'genres' : 'Genres'
            }).reset_index()


        display(HTML(df.to_html(escape=False)))